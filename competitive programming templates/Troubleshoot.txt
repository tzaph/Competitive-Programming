After reading problem, think of all possible tech
All techniques to try out from ezest to hardest:
most basic:
	Sort + greedy
	Prefix (l to r)
	Suffix (r to l)
	Two pointers
	Naive but fast (const opt)
	Math manipulation
	Compression
	Binary search
ez:
	DnC
	fenwick
	DSU
	range property
	sparse table
	segtree
	MST
	Dijkstra
	LCA
	bitset
	Bellman-Ford
	Floyd Warshall
	Offline
	ternary search
	generate naive DP
medium:
	Centroid decomposition
	CHT
	Sack (small to large)
	dynamic CHT:
		LineContainer (set)
		Li Chao Tree
	LCA but faster
		n precomp --> segtree
		q qry --> sparse find min
	bruteforce pruning
	SCC
	sqrt pending update
	max bip match
	MITM
	hashing
	bitmask
hard:
	sqrt decomp
	Mo's alg
	DP DnC
	Monge parametric search
	Knuth
	SPFA
	cbrt strats
	Heuristics weird stuff
Must avoid but if I must:
	MCMF
	treap
	Block cut tree
	Bridge cut tree
	AVL
Out of syllabus but yeah:
	LCT/Splay tree
	String algo (aho corasick, suffix array)
	FFT
	2D DS

Pre-submit:
Write a few simple test cases if sample is not enough.
Are time limits close? If so, generate max cases.
Is the memory usage fine?
Could anything overflow?
Make sure to submit the right file.

Wrong answer:
Print your solution! 
	Print debug output, as well.
Are you clearing all DS between test cases?
Can your algorithm handle the whole range of input?
Read the full problem statement again.
Do you handle all corner cases correctly?
Have you understood the problem correctly?
Any uninitialized variables?
Any overflows?
Confusing N and M, i and j, etc.?
Are you sure your algorithm works?
What special cases have you not thought of?
Are you sure the STL functions you use work as you think?
Add some assertions, maybe resubmit.
Create some testcases to run your algorithm on.
Go through the algorithm for a simple case.
Go through this list again.
Go for a small walk
	e.g. to the toilet.
Is your output format correct? 
	(including whitespace)
Recode

Runtime error:
In some judges, MLE is considered RTE
	Check your memory use
Have you tested all corner cases locally?
Any uninitialized variables?
Are you reading or writing outside the range of any vector?
Any assertions that might fail?
Infinite recursion? 
Any possible division by 0?
	ex mod 0
Any possible infinite recursion?
Invalidated pointers or iterators?
Are you using too much memory?
Debug with resubmits.
Force WA (asserts for RTE problems)

Time limit exceeded:
Do you have any possible infinite loops?
What is the complexity of your algorithm?
Are you copying a lot of unnecessary data? (References)
How big is the input and output? (consider scanf)
Avoid vector, map. (use arrays/unordered_map)
What do your teammates think about your algorithm?

Memory limit exceeded:
What is the max amount of memory your algorithm should need?
Are you clearing all DS between test cases?
Infinite recursion? (As in pushing into a DS infinitely)